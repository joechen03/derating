# -*- coding: utf-8 -*-
"""Derating.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xmdux_WDw54kImjVkHe8P2vAGLA19EAg

此程式將BOM表(.CSV)內的資訊轉成Derating需要的格式並輸出檔案(.CSV)

This program is designed to sort BOM and create a file with every components data in different pages.

Ex.

Input：BOM.csv

Lv	|Direct BOM	|Main Part	|Rev.	|Seq.	|Part Full Desc.|Qty.|Subsitution Part	|Inst. Point	|HSF Property	
-|-|-|-|-|-|-|-|-|-
1	|1395A3078401	|6019B0460301	|A02	|1|	IC,SHUNT REGULATOR,ADJ,SOT-23F,3P,TR|	1|	-	|PU895|	HalogenFree+RoHS2
1	|1395A3078401	|6012B1055302	|A01	|2|	CONNECTOR,POWER CARD EDGE,7.5mm,FL,9A,BLK,50P,2.54mm,90D,PIP,TRAY,LCP,GXT,30U,3.5mm	|2	|-	|PJ768,PJ775|	RoHS2

Output：BOM_output.csv

<Center>Page：MicroCircuit

No. |Ref.Desig.	| P/N	|Component description
    -|-|-|-
1	|PU895	|6019B0460301	|IC,SHUNT REGULATOR,ADJ,SOT-23F,3P,T

<Center>Page：Connector

No. |Ref.Desig.	| P/N	|Component description
    -|-|-|-
1	|PJ768	|6012B1055302	|CONNECTOR,POWER CARD EDGE,7.5mm,FL,9A,BLK,50P,2.54mm,90D,PIP,TRAY,LCP,GXT,30U,3.5mm
2	|PJ775	|6012B1055302	|CONNECTOR,POWER CARD EDGE,7.5mm,FL,9A,BLK,50P,2.54mm,90D,PIP,TRAY,LCP,GXT,30U,3.5mm
"""

import pandas as pd

InputPATH='' 
InputPATH = input("Please input file path:")
while not os.path.exists(InputPATH):
    print( InputPATH + ' doesn\'t exist!' )
    InputPATH = input("Please input file path:")
    

OutputPATH = InputPATH.replace('.csv','_output.xlsx')
df = pd.read_csv(InputPATH,encoding='utf-8',sep='\t')

instr = df.values.tolist()  # convert dataframe to list
if len(instr) == 0:
    print('No data in this file!!!')
    exit()
i = 0 # current row 

data = str(instr[i]).split(',')

# Find the row of name 
while 'Main Part' not in data:
    i += 1
    data = str(instr[i]).split(',')

row_of_name = i + 1 # The row of all category name    
i += 1              # The first row of data 
start = i

CList = []  # Capacitor
QList = []  # Transistor
RList = []  # Diode
LList = []  # Inductor,Bead
YList = []  # Crystal
JList = []  # Connector
UList = []  # MicroCircuit,IC
FList = []  # Fuse

i = start
for idx in range(len(instr)-row_of_name-1):
    row = instr[i][0].split('"')
    #print(row)
    if len(row) == 5:                   # point is not empty
        temp = row[3].split(',')
        count = len(temp)               # quantity of the component
        temp = row[0].split(',')
        pn = temp[2]                    # PN of the component
        description = row[1]            # description of the component  
        if 'C' in row[3] and 'CAPACITOR' in row[1]:                   # This is Capacitor
            temp = row[1].split(',')                                  # Seperate content of Description into a List
            rated = temp[2].replace('V','')                           # rated V of the component
            for j in range(count):                                    # This loop put the same component but in different location into the list one by one
                temp = row[3].split(',')                              # Seperate content of Point into a List
                point = temp[j]
                CList.append([point,pn,description,rated])            # Put Point、PN、Description、rated into CList
                #print('Capacitor:',CList[len(CList)-1])
        elif 'Q' in row[3] and 'TRANSISTOR' in row[1]:                # This is Transistor
            temp = row[1].split(',')
            rated = temp[2].replace('V','')
            for j in range(count):
                temp = row[3].split(',')
                point = temp[j]
                QList.append([point,pn,description,rated])            # Put Point、PN、Description、rated into QList
                #print('Transistor:',QList[len(QList)-1])
        elif ( 'CR' or 'D' in row[3] ) and 'DIODE' in row[1]:         # This is Diode
            for j in range(count):
                temp = row[3].split(',')
                point = temp[j]
                RList.append([point,pn,description])                  # Put Point、PN、Description into RList
                #print('DIODE:',RList[len(RList)-1])
        elif 'L' in row[3] and ( 'INDUCTOR' in row[1] or 'BEAD' in row[1] ):    # This is Inductor or Bead
            temp = row[1].split(',')
            if 'INDUCTOR' in row[1]:
                if 'mA' in row[1]:
                    rated = float(temp[4].replace('mA',''))/1000
                else:
                    rated = temp[4].replace('A','')
            elif 'BEAD' in row[1]:
                if 'mA' in row[1]:
                    rated = float(temp[3].replace('mA',''))/1000
                else:
                    rated = temp[3].replace('A','')
            for j in range(count):
                temp = row[3].split(',')
                point = temp[j]
                LList.append([point,pn,description,rated])            # Put Point、PN、Description、rated into LList
                #print('INDUCTOR:',LList[len(LList)-1])
        elif 'Y' in row[3]:                                           # This is Crystal
            for j in range(count): 
                temp = row[3].split(',')
                point = temp[j]
                YList.append([point,pn,description])                  # Put Point、PN、Description into YList
                #print('CRYSTAL:',YList[len(YList)-1])
        elif 'J' in row[3] and 'CONNECTOR' in row[1]:                 # This is Connector
            for j in range(count):
                temp = row[3].split(',')
                point = temp[j]
                JList.append([point,pn,description])                  # Put Point、PN、Description into JList
                #print('CONNECTOR:',JList[len(JList)-1])
        elif 'U' in row[3] and 'IC' in row[1]:                        # This is IC
            for j in range(count):
                temp = row[3].split(',')
                point = temp[j]
                UList.append([point,pn,description])                  # Put Point、PN、Description into UList
                #print('IC:',UList[len(UList)-1])
        elif 'PF' in row[3] and 'FUSE' in row[1]:                     # This is Fuse
            temp = row[1].split(',')
            rated = temp[2].replace('A','')
            for j in range(count):
                temp = row[3].split(',')
                point = temp[j]
                FList.append([point,pn,description,rated])            # Put Point、PN、Description、rated into FList
                #print('FUSE:',FList[len(FList)-1])

    i += 1

bar_name1 = ['Ref.Desig.','IESC P/N','Component description','Rated ']
bar_name2 = ['Ref.Desig.','IESC P/N','Component description']
name = ['Capacitor','Transistor','Diode','Inductor-Bead','Crystal','Connector','MicroCircuit','Fuse']
all = [CList,QList,RList,LList,YList,JList,UList,FList]

writer = pd.ExcelWriter(OutputPATH)
for idx in range(len(all)):
    if all[idx] : # Check the list is empty or not
        store = pd.DataFrame.from_dict( all[idx] )
        store.index += 1
        if all[idx] == CList or all[idx] == QList or all[idx] == LList or all[idx] == FList:
         store.to_excel(writer, sheet_name=name[idx] ,index =True,header=bar_name1)
        else:
            store.to_excel(writer, sheet_name=name[idx] ,index =True,header=bar_name2)

writer.save()

print('Output File:', OutputPATH)

input('Press Any Key To Exit...')